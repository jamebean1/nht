$PBExportHeader$m_std_reports.srm
$PBExportComments$Standard reports menu
forward
global type m_std_reports from menu
end type
type m_file from menu within m_std_reports
end type
type m_outofoffice from menu within m_file
end type
type m_-0 from menu within m_file
end type
type m_printersetup from menu within m_file
end type
type m_printreport from menu within m_file
end type
type m_filesep3 from menu within m_file
end type
type m_close from menu within m_file
end type
type m_- from menu within m_file
end type
type m_exit from menu within m_file
end type
type m_file from menu within m_std_reports
m_outofoffice m_outofoffice
m_-0 m_-0
m_printersetup m_printersetup
m_printreport m_printreport
m_filesep3 m_filesep3
m_close m_close
m_- m_-
m_exit m_exit
end type
type m_edit from menu within m_std_reports
end type
type m_tab1 from menu within m_edit
end type
type m_tab2 from menu within m_edit
end type
type m_edit from menu within m_std_reports
m_tab1 m_tab1
m_tab2 m_tab2
end type
type m_features from menu within m_std_reports
end type
type m_createmaintaincase from menu within m_features
end type
type m_workdesk from menu within m_features
end type
type m_documentsfullinterface from menu within m_features
end type
type m_recordsurveyresults from menu within m_features
end type
type m_features from menu within m_std_reports
m_createmaintaincase m_createmaintaincase
m_workdesk m_workdesk
m_documentsfullinterface m_documentsfullinterface
m_recordsurveyresults m_recordsurveyresults
end type
type m_administration from menu within m_std_reports
end type
type m_userlicenses from menu within m_administration
end type
type m_updatelicenseinformation from menu within m_userlicenses
end type
type m_manageuserlogins from menu within m_userlicenses
end type
type m_userlicenses from menu within m_administration
m_updatelicenseinformation m_updatelicenseinformation
m_manageuserlogins m_manageuserlogins
end type
type m_options from menu within m_administration
end type
type m_batchprocessing from menu within m_administration
end type
type m_casehousekeeping from menu within m_administration
end type
type m_tablemaintenance from menu within m_administration
end type
type m_supervisorportal from menu within m_administration
end type
type m_lockedrecords from menu within m_administration
end type
type m_administration from menu within m_std_reports
m_userlicenses m_userlicenses
m_options m_options
m_batchprocessing m_batchprocessing
m_casehousekeeping m_casehousekeeping
m_tablemaintenance m_tablemaintenance
m_supervisorportal m_supervisorportal
m_lockedrecords m_lockedrecords
end type
type m_window from menu within m_std_reports
end type
type m_tile from menu within m_window
end type
type m_layer from menu within m_window
end type
type m_cascade from menu within m_window
end type
type m_-w1 from menu within m_window
end type
type m_arrangeicons from menu within m_window
end type
type m_-w2 from menu within m_window
end type
type m_closeall from menu within m_window
end type
type m_window from menu within m_std_reports
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m_-w1 m_-w1
m_arrangeicons m_arrangeicons
m_-w2 m_-w2
m_closeall m_closeall
end type
type m_help from menu within m_std_reports
end type
type m_index from menu within m_help
end type
type m_usinghelp from menu within m_help
end type
type m_-h1 from menu within m_help
end type
type m_about from menu within m_help
end type
type m_help from menu within m_std_reports
m_index m_index
m_usinghelp m_usinghelp
m_-h1 m_-h1
m_about m_about
end type
global type m_std_reports from menu
m_file m_file
m_edit m_edit
m_features m_features
m_administration m_administration
m_window m_window
m_help m_help
end type
end forward

global type m_std_reports from menu
m_file m_file
m_edit m_edit
m_features m_features
m_administration m_administration
m_window m_window
m_help m_help
end type
global m_std_reports m_std_reports

type variables
BOOLEAN i_bOutOfOffice
STRING  i_cUserID


end variables

on m_std_reports.create
m_std_reports=this
call super::create
this.m_file=create m_file
this.m_edit=create m_edit
this.m_features=create m_features
this.m_administration=create m_administration
this.m_window=create m_window
this.m_help=create m_help
this.Item[UpperBound(this.Item)+1]=this.m_file
this.Item[UpperBound(this.Item)+1]=this.m_edit
this.Item[UpperBound(this.Item)+1]=this.m_features
this.Item[UpperBound(this.Item)+1]=this.m_administration
this.Item[UpperBound(this.Item)+1]=this.m_window
this.Item[UpperBound(this.Item)+1]=this.m_help
end on

on m_std_reports.destroy
call super::destroy
destroy(this.m_file)
destroy(this.m_edit)
destroy(this.m_features)
destroy(this.m_administration)
destroy(this.m_window)
destroy(this.m_help)
end on

type m_file from menu within m_std_reports
m_outofoffice m_outofoffice
m_-0 m_-0
m_printersetup m_printersetup
m_printreport m_printreport
m_filesep3 m_filesep3
m_close m_close
m_- m_-
m_exit m_exit
end type

on m_file.create
call super::create
this.text = "&File"
this.m_outofoffice=create m_outofoffice
this.m_-0=create m_-0
this.m_printersetup=create m_printersetup
this.m_printreport=create m_printreport
this.m_filesep3=create m_filesep3
this.m_close=create m_close
this.m_-=create m_-
this.m_exit=create m_exit
this.Item[UpperBound(this.Item)+1]=this.m_outofoffice
this.Item[UpperBound(this.Item)+1]=this.m_-0
this.Item[UpperBound(this.Item)+1]=this.m_printersetup
this.Item[UpperBound(this.Item)+1]=this.m_printreport
this.Item[UpperBound(this.Item)+1]=this.m_filesep3
this.Item[UpperBound(this.Item)+1]=this.m_close
this.Item[UpperBound(this.Item)+1]=this.m_-
this.Item[UpperBound(this.Item)+1]=this.m_exit
end on

on m_file.destroy
call super::destroy
destroy(this.m_outofoffice)
destroy(this.m_-0)
destroy(this.m_printersetup)
destroy(this.m_printreport)
destroy(this.m_filesep3)
destroy(this.m_close)
destroy(this.m_-)
destroy(this.m_exit)
end on

event clicked;//*********************************************************************************************
//
//  Event:   clicked
//  Purpose: To determine whether or not to check Out Of Office
//  
//  Date     Developer   Describe
//  -------- ----------- ----------------------------------------------------------------------
//  09/26/00 C. Jackson  Original Version
//
//*********************************************************************************************

LONG l_nCount

// Get userid
i_cUserID = OBJCA.WIN.fu_GetLogin(SQLCA)

// If the user is currently mark as out of the office, setting the Check on the menu item
SELECT count(*) INTO :l_nCount
  FROM cusfocus.out_of_office
 WHERE out_user_id = :i_cUserID
 USING SQLCA;
 
// Update the clicked property based on whether not the user if Out of Office 
IF l_nCount > 0 THEN
	m_outofoffice.Check()
	i_bOutOfOffice = TRUE
ELSE
	m_outofoffice.UnCheck ()
	i_bOutOfOffice = FALSE
END IF


end event

type m_outofoffice from menu within m_file
end type

on m_outofoffice.create
call super::create
this.text = "&Out of Office"
end on

on m_outofoffice.destroy
call super::destroy
end on

event clicked;//**********************************************************************************************
//
//  Event:   clicked
//  Purpose: Add or Remove Out of Office
//  
//  Date     Developer   Description
//  -------- ----------- -----------------------------------------------------------------------
//  09/28/00 cjackson    Original Version
//  12/08/00 cjackson    Update routed.bmp as necessary
//  12/13/00 cjackson    Add logic to prevent marking out of office if cases are being routed
//
//**********************************************************************************************

STRING l_cNewKey, l_cWindowTitle, l_cAssignedTo, l_cBMP, l_cOutUser
LONG l_nCount, l_nIndex
DATETIME l_dtCreateDate
LONG l_nPos

l_cWindowTitle = w_mdi.Title 

IF i_bOutOfOffice THEN
	// Check to see if this CSR's cases are being route to another CSR
	SELECT assigned_to_user_id INTO :l_cAssignedTo
	  FROM cusfocus.out_of_office
	 WHERE out_user_id = :i_cUserID
	 USING SQLCA;
	 
	IF NOT ISNULL(l_cAssignedTo) THEN
		// See if this CSR is also being routed another CSR's cases
		SELECT COUNT (*) INTO :l_nCount
		  FROM cusfocus.out_of_office
		 WHERE assigned_to_user_id = :l_cAssignedTo
		 USING SQLCA;
		
		IF l_nCount = 1 THEN
			// This is the only route record, set the icon back to person.bmp
			UPDATE cusfocus.cusfocus_user
				SET out_of_office_bmp = 'person.bmp'
			 WHERE user_id = :l_cAssignedTo
			 USING SQLCA;
		END IF
		 
	END IF
	
	// Mark the CSR in the office
	SELECT assigned_to_user_id INTO :l_cAssignedTo
	  FROM cusfocus.out_of_office
	 WHERE out_user_id = :i_cUserID
	 USING SQLCA;
	 
	// Remove Out of Office
	DELETE cusfocus.out_of_office
	 WHERE out_user_id = :i_cUserID
	 USING SQLCA;

	// Determine if the icon should be 'routed.bmp' (if this CSR is being routed
	// another CSR's cases) or 'person.bmp' (they are not)
	SELECT COUNT (*) INTO :l_nCount
	  FROM cusfocus.out_of_office
	 WHERE assigned_to_user_id = :i_cUserID
	 USING SQLCA;
	 
	IF l_nCount > 0 THEN 
		l_cBMP = 'routed.bmp' 
	ELSE
		l_cBMP = 'person.bmp'
	END IF
	
	UPDATE cusfocus.cusfocus_user
	   SET out_of_office_bmp = :l_cBMP
	 WHERE user_id = :i_cUserID
	 USING SQLCA;
	 
	// Make sure window title is not already modified
	l_nPos = POS(l_cWindowTitle,' ***')
	IF l_nPos > 0 THEN
		l_cWindowTitle = TRIM(MID(l_cWindowTitle,1,l_nPos))
		w_mdi.Title = l_cWindowTitle
	END IF
	
ELSE
	// Make sure the user is not being routed cases from someone else before marking out of office
	SELECT COUNT(*) INTO :l_nIndex
	  FROM cusfocus.out_of_office
	 WHERE assigned_to_user_id = :i_cUserID
	 USING SQLCA;
	 
	IF l_nIndex > 0 THEN
		// Can't mark out of office...
		messagebox(gs_AppName, 'You are currently being routed cases, you cannot mark yourself out of office')
	
		//Mark the user out of office
		l_dtCreateDate = DateTime(Today())
		l_cNewKey = w_batch_correspondence.fw_getkeyvalue('out_of_office')
		
	ELSE
		
		INSERT INTO cusfocus.out_of_office (out_of_office_id, out_user_id, updated_by, updated_timestamp)
		VALUES (:l_cNewKey, :i_cUserID, :i_cUserID, :l_dtCreateDate)
		USING SQLCA;									 
		
		//Update the icon to out_of_office.bmp
		UPDATE cusfocus.cusfocus_user
			SET out_of_office_bmp = 'out_of_office.bmp'
		 WHERE user_id = :i_cUserID
		 USING SQLCA;
	
		// Make sure window title is not already modified
		l_nPos = POS(l_cWindowTitle,' ***')
		IF l_nPos = 0 THEN
			w_mdi.Title = w_mdi.Title + ' *** Out of Office'
		END IF
		
	END IF
	
END IF


end event

type m_-0 from menu within m_file
end type

on m_-0.create
call super::create
this.text = "-"
end on

on m_-0.destroy
call super::destroy
end on

type m_printersetup from menu within m_file
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_PrintSetup
//  Event         : Clicked
//  Description   : Modify or view the printer setup for this
//                  Windows session.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

PrintSetUp()
end on

on m_printersetup.create
call super::create
this.text = "Print Set&up..."
this.microhelp = "Opens the Window Print Setup window"
this.toolbaritemvisible = false
this.toolbaritemtext = "Setup"
end on

on m_printersetup.destroy
call super::destroy
end on

type m_printreport from menu within m_file
end type

on clicked;IF IsValid(FWCA.MGR.i_WindowCurrent) THEN
   FWCA.MGR.i_WindowCurrent.TriggerEvent("ue_print")
END IF

end on

on m_printreport.create
call super::create
this.text = "&Print Report~tCtrl+P"
this.shortcut = 336
this.microhelp = "Print the current selected report"
this.toolbaritemname = "Print!"
this.toolbaritemtext = "Print Report"
this.toolbaritemorder = 5
this.toolbaritemspace = 3
end on

on m_printreport.destroy
call super::destroy
end on

type m_filesep3 from menu within m_file
end type

on m_filesep3.create
call super::create
this.text = "-"
end on

on m_filesep3.destroy
call super::destroy
end on

type m_close from menu within m_file
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_CloseFile
//  Event         : Clicked
//  Description   : Close the current window.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF IsValid(FWCA.MGR.i_WindowCurrent) THEN
   Close(FWCA.MGR.i_WindowCurrent)
END IF
end on

on m_close.create
call super::create
this.text = "Close &Window"
this.microhelp = "Close the currently selected window."
this.toolbaritemvisible = false
this.toolbaritemtext = "Close"
this.toolbaritemorder = 13
this.toolbaritemspace = 5
end on

on m_close.destroy
call super::destroy
end on

type m_- from menu within m_file
end type

on m_-.create
call super::create
this.text = "-"
end on

on m_-.destroy
call super::destroy
end on

type m_exit from menu within m_file
end type

event clicked;//******************************************************************

//  PC Module     : m_Main.m_Exit
//  Event         : Clicked
//  Description   : Exit the application by closing the top
//                  level window.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1994.  All Rights Reserved.
//******************************************************************

FWCA.MGR.fu_ExitApp()
end event

on m_exit.create
call super::create
this.text = "E&xit"
this.microhelp = "Exit the application"
this.toolbaritemvisible = false
this.toolbaritemname = "Exit!"
this.toolbaritemtext = "Exit"
this.toolbaritemorder = 1
end on

on m_exit.destroy
call super::destroy
end on

type m_edit from menu within m_std_reports
m_tab1 m_tab1
m_tab2 m_tab2
end type

on m_edit.create
call super::create
this.visible = false
this.text = "Edit"
this.m_tab1=create m_tab1
this.m_tab2=create m_tab2
this.Item[UpperBound(this.Item)+1]=this.m_tab1
this.Item[UpperBound(this.Item)+1]=this.m_tab2
end on

on m_edit.destroy
call super::destroy
destroy(this.m_tab1)
destroy(this.m_tab2)
end on

type m_tab1 from menu within m_edit
end type

on m_tab1.create
call super::create
this.visible = false
this.text = "Tab1~tCtrl+1"
this.shortcut = 305
end on

on m_tab1.destroy
call super::destroy
end on

event clicked;/*****************************************************************************************
	Event:	clicked
	Purpose:	Provide a consistent mechanism for switching between tabs.
	
	Revisions:
	Date     Developer     Description
	======== ============= ================================================================
	8/16/99  M. Caruso     Created.
*****************************************************************************************/

w_std_reports.uo_folder.fu_SelectTab (1)
end event

type m_tab2 from menu within m_edit
end type

on m_tab2.create
call super::create
this.visible = false
this.text = "Tab2~tCtrl+2"
this.shortcut = 306
end on

on m_tab2.destroy
call super::destroy
end on

event clicked;/*****************************************************************************************
	Event:	clicked
	Purpose:	Provide a consistent mechanism for switching between tabs.
	
	Revisions:
	Date     Developer     Description
	======== ============= ================================================================
	8/16/99  M. Caruso     Created.
*****************************************************************************************/

w_std_reports.uo_folder.fu_SelectTab (2)
end event

type m_features from menu within m_std_reports
m_createmaintaincase m_createmaintaincase
m_workdesk m_workdesk
m_documentsfullinterface m_documentsfullinterface
m_recordsurveyresults m_recordsurveyresults
end type

on m_features.create
call super::create
this.text = "Fea&tures"
this.m_createmaintaincase=create m_createmaintaincase
this.m_workdesk=create m_workdesk
this.m_documentsfullinterface=create m_documentsfullinterface
this.m_recordsurveyresults=create m_recordsurveyresults
this.Item[UpperBound(this.Item)+1]=this.m_createmaintaincase
this.Item[UpperBound(this.Item)+1]=this.m_workdesk
this.Item[UpperBound(this.Item)+1]=this.m_documentsfullinterface
this.Item[UpperBound(this.Item)+1]=this.m_recordsurveyresults
end on

on m_features.destroy
call super::destroy
destroy(this.m_createmaintaincase)
destroy(this.m_workdesk)
destroy(this.m_documentsfullinterface)
destroy(this.m_recordsurveyresults)
end on

type m_createmaintaincase from menu within m_features
event clicked ( )
end type

on clicked;/********************************************************************

		Event:	Clicked

		Purpose:	To open the Create/Maintain Case Window

*********************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_create_maintain_case, -1)
end on

on m_createmaintaincase.create
call super::create
this.text = "&Create/Maintain Case"
this.microhelp = "Opens the Create and Maintain Case window"
end on

on m_createmaintaincase.destroy
call super::destroy
end on

type m_workdesk from menu within m_features
event clicked ( )
end type

on clicked;SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_reminders, -1)
end on

on m_workdesk.create
call super::create
this.text = "&Work Desk"
this.microhelp = "Opens the Work Desk window"
end on

on m_workdesk.destroy
call super::destroy
end on

type m_documentsfullinterface from menu within m_features
event clicked ( )
end type

event clicked;//***************************************************************************************
//
//  Event:    clicked
//  Purpose:  Opens the Document Full Interface Window
//
//***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_docs_full_interface, -1)


end event

on m_documentsfullinterface.create
call super::create
this.text = "&Documents Full Interface"
this.microhelp = "Opens the Documents Full Interface Window"
end on

on m_documentsfullinterface.destroy
call super::destroy
end on

type m_recordsurveyresults from menu within m_features
event clicked ( )
end type

on clicked;SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_record_survey_results, -1)
end on

on m_recordsurveyresults.create
call super::create
this.text = "Record &Survey Results"
this.microhelp = "Opens the Record Survey Results window"
end on

on m_recordsurveyresults.destroy
call super::destroy
end on

type m_administration from menu within m_std_reports
m_userlicenses m_userlicenses
m_options m_options
m_batchprocessing m_batchprocessing
m_casehousekeeping m_casehousekeeping
m_tablemaintenance m_tablemaintenance
m_supervisorportal m_supervisorportal
m_lockedrecords m_lockedrecords
end type

on m_administration.create
call super::create
this.text = "&Administration"
this.m_userlicenses=create m_userlicenses
this.m_options=create m_options
this.m_batchprocessing=create m_batchprocessing
this.m_casehousekeeping=create m_casehousekeeping
this.m_tablemaintenance=create m_tablemaintenance
this.m_supervisorportal=create m_supervisorportal
this.m_lockedrecords=create m_lockedrecords
this.Item[UpperBound(this.Item)+1]=this.m_userlicenses
this.Item[UpperBound(this.Item)+1]=this.m_options
this.Item[UpperBound(this.Item)+1]=this.m_batchprocessing
this.Item[UpperBound(this.Item)+1]=this.m_casehousekeeping
this.Item[UpperBound(this.Item)+1]=this.m_tablemaintenance
this.Item[UpperBound(this.Item)+1]=this.m_supervisorportal
this.Item[UpperBound(this.Item)+1]=this.m_lockedrecords
end on

on m_administration.destroy
call super::destroy
destroy(this.m_userlicenses)
destroy(this.m_options)
destroy(this.m_batchprocessing)
destroy(this.m_casehousekeeping)
destroy(this.m_tablemaintenance)
destroy(this.m_supervisorportal)
destroy(this.m_lockedrecords)
end on

type m_userlicenses from menu within m_administration
m_updatelicenseinformation m_updatelicenseinformation
m_manageuserlogins m_manageuserlogins
end type

on m_userlicenses.create
call super::create
this.text = "&User Licenses"
this.m_updatelicenseinformation=create m_updatelicenseinformation
this.m_manageuserlogins=create m_manageuserlogins
this.Item[UpperBound(this.Item)+1]=this.m_updatelicenseinformation
this.Item[UpperBound(this.Item)+1]=this.m_manageuserlogins
end on

on m_userlicenses.destroy
call super::destroy
destroy(this.m_updatelicenseinformation)
destroy(this.m_manageuserlogins)
end on

type m_updatelicenseinformation from menu within m_userlicenses
event clicked ( )
end type

event clicked;/*****************************************************************************************
   Event:      clicked
   Purpose:    Open the user license maintenance window

   Revisions:
   Date     Developer    Description
   ======== ============ =================================================================
	8/7/00   M. Caruso    Created.
*****************************************************************************************/

SetPointer (HOURGLASS!)

FWCA.MGR.fu_OpenWindow (w_slu_main)
end event

on m_updatelicenseinformation.create
call super::create
this.text = "&Update License Information"
this.microhelp = "Opens the Update License Information window"
end on

on m_updatelicenseinformation.destroy
call super::destroy
end on

type m_manageuserlogins from menu within m_userlicenses
event clicked ( )
end type

event clicked;/*****************************************************************************************
   Event:      clicked
   Purpose:    Open the user login maintenance window

   Revisions:
   Date     Developer    Description
   ======== ============ =================================================================
	8/7/00   M. Caruso    Created.
*****************************************************************************************/

SetPointer (HOURGLASS!)

FWCA.MGR.fu_OpenWindow (w_slu_login_mgr)
end event

on m_manageuserlogins.create
call super::create
this.text = "&Manage User Logins"
this.microhelp = "Opens the User Login Management window"
end on

on m_manageuserlogins.destroy
call super::destroy
end on

type m_options from menu within m_administration
event clicked ( )
end type

event clicked;//*********************************************************************************************
//  Event:   clicked
//  Purpose: Acces the system options window.
//  
//  Date     Developer   Describe
//  -------- ----------- ----------------------------------------------------------------------
//  12/08/00 M. Caruso   Created.
//*********************************************************************************************

SetPointer (HOURGLASS!)
FWCA.MGR.fu_OpenWindow (w_system_options)
end event

on m_options.create
call super::create
this.text = "&Options"
this.toolbaritemvisible = false
end on

on m_options.destroy
call super::destroy
end on

type m_batchprocessing from menu within m_administration
event clicked ( )
end type

on clicked;SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_batch_correspondence, -1)
end on

on m_batchprocessing.create
call super::create
this.text = "&Batch Correspondence"
this.microhelp = "Opens the Batch Correspondence window"
end on

on m_batchprocessing.destroy
call super::destroy
end on

type m_casehousekeeping from menu within m_administration
event clicked ( )
end type

on clicked;SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_case_housekeeping, -1)
end on

on m_casehousekeeping.create
call super::create
this.text = "Case &Housekeeping"
this.microhelp = "Opens the Case Housekeeping window"
end on

on m_casehousekeeping.destroy
call super::destroy
end on

type m_tablemaintenance from menu within m_administration
event clicked ( )
end type

on clicked;SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_table_maintenance, -1)
end on

on m_tablemaintenance.create
call super::create
this.text = "&Table Maintenance"
this.microhelp = "Opens the Table Maintenance window"
end on

on m_tablemaintenance.destroy
call super::destroy
end on

type m_supervisorportal from menu within m_administration
end type

event clicked;/**************************************************************************************

			Event:	clicked
			Purpose:	To open the Supervisor Portal Window

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_supervisor_portal, -1)
end event

on m_supervisorportal.create
call super::create
this.text = "&Supervisor Portal"
this.microhelp = "Opens the Supervisor Portal window"
end on

on m_supervisorportal.destroy
call super::destroy
end on

type m_lockedrecords from menu within m_administration
end type

event clicked;/**************************************************************************************

			Event:	clicked
			Purpose:	To open the Record Lock Administration window.

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_lock_admin, -1)
end event

on m_lockedrecords.create
call super::create
this.text = "&Locked Records"
this.microhelp = "Locked Records"
this.toolbaritemtext = "Record Locks"
end on

on m_lockedrecords.destroy
call super::destroy
end on

type m_window from menu within m_std_reports
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m_-w1 m_-w1
m_arrangeicons m_arrangeicons
m_-w2 m_-w2
m_closeall m_closeall
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Window
//  Event         : Clicked
//  Description   : Enable the window menus
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

m_Window.m_ArrangeIcons.Enabled = FWCA.MGR.i_MDIValid
m_Window.m_Cascade.Enabled      = FWCA.MGR.i_MDIValid
m_Window.m_Layer.Enabled        = FWCA.MGR.i_MDIValid
m_Window.m_Tile.Enabled         = FWCA.MGR.i_MDIValid
m_Window.m_Closeall.Enabled     = FWCA.MGR.i_MDIValid
end on

on m_window.create
call super::create
this.text = "&Window"
this.m_tile=create m_tile
this.m_layer=create m_layer
this.m_cascade=create m_cascade
this.m_-w1=create m_-w1
this.m_arrangeicons=create m_arrangeicons
this.m_-w2=create m_-w2
this.m_closeall=create m_closeall
this.Item[UpperBound(this.Item)+1]=this.m_tile
this.Item[UpperBound(this.Item)+1]=this.m_layer
this.Item[UpperBound(this.Item)+1]=this.m_cascade
this.Item[UpperBound(this.Item)+1]=this.m_-w1
this.Item[UpperBound(this.Item)+1]=this.m_arrangeicons
this.Item[UpperBound(this.Item)+1]=this.m_-w2
this.Item[UpperBound(this.Item)+1]=this.m_closeall
end on

on m_window.destroy
call super::destroy
destroy(this.m_tile)
destroy(this.m_layer)
destroy(this.m_cascade)
destroy(this.m_-w1)
destroy(this.m_arrangeicons)
destroy(this.m_-w2)
destroy(this.m_closeall)
end on

type m_tile from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Tile
//  Event         : Clicked
//  Description   : Arrange the open windows so that no windows in
//                  the MDI frame overlap but all windows are
//                  visible.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Tile!)
END IF
end on

on m_tile.create
call super::create
this.text = "&Tile"
this.microhelp = "Arrange windows as tiled"
this.toolbaritemvisible = false
this.toolbaritemname = "Tile!"
this.toolbaritemtext = "Tile"
this.toolbaritemorder = 10
this.toolbaritemspace = 3
end on

on m_tile.destroy
call super::destroy
end on

type m_layer from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Layer
//  Event         : Clicked
//  Description   : Arrange the open windows so that all windows are
//                  sized to use the full screen and are layered on
//                  top of one another.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Layer!)
END IF
end on

on m_layer.create
call super::create
this.text = "La&yer"
this.microhelp = "Arrange the windows as layered"
this.toolbaritemvisible = false
this.toolbaritemname = "Layer!"
this.toolbaritemtext = "Layer"
this.toolbaritemorder = 11
end on

on m_layer.destroy
call super::destroy
end on

type m_cascade from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Cascade
//  Event         : Clicked
//  Description   : Arrange the open windows so they overlap each
//                  other with the title bar of each window
//                  remaining visible.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Cascade!)
END IF
end on

on m_cascade.create
call super::create
this.text = "&Cascade"
this.microhelp = "Arrange the windows as cascaded"
this.toolbaritemvisible = false
this.toolbaritemname = "Cascade!"
this.toolbaritemtext = "Cascade"
this.toolbaritemorder = 12
end on

on m_cascade.destroy
call super::destroy
end on

type m_-w1 from menu within m_window
end type

on m_-w1.create
call super::create
this.text = "-"
end on

on m_-w1.destroy
call super::destroy
end on

type m_arrangeicons from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_ArrangeIcons
//  Event         : Clicked
//  Description   : Arrange the open windows that have been
//                  minimized to icons.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Icons!)
END IF
end on

on m_arrangeicons.create
call super::create
this.text = "&Arrange Icons"
this.microhelp = "Arrange the window icons"
this.toolbaritemvisible = false
this.toolbaritemname = "ArrangeIcons!"
this.toolbaritemtext = "Icons"
this.toolbaritemorder = 13
end on

on m_arrangeicons.destroy
call super::destroy
end on

type m_-w2 from menu within m_window
end type

on m_-w2.create
call super::create
this.text = "-"
end on

on m_-w2.destroy
call super::destroy
end on

type m_closeall from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_CloseAll
//  Event         : Clicked
//  Description   : Close all the windows in the MDI frame that
//                  have been open using the Window_Open function.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   TriggerEvent(FWCA.MGR.i_MDIFrame, "pc_CloseAll")
END IF
end on

on m_closeall.create
call super::create
this.text = "C&lose All"
this.microhelp = "Close all the open windows"
this.toolbaritemvisible = false
this.toolbaritemname = "Sort!"
this.toolbaritemtext = "Close All"
this.toolbaritemorder = 14
end on

on m_closeall.destroy
call super::destroy
end on

type m_help from menu within m_std_reports
m_index m_index
m_usinghelp m_usinghelp
m_-h1 m_-h1
m_about m_about
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Help
//  Event         : Clicked
//  Description   : Set up the text in the help menu.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1994.  All Rights Reserved.
//******************************************************************

IF IsValid(m_Help.m_About) THEN
   m_Help.m_About.Text = "&About " + FWCA.MGR.i_ApplicationName
END IF
end on

on m_help.create
call super::create
this.text = "&Help"
this.m_index=create m_index
this.m_usinghelp=create m_usinghelp
this.m_-h1=create m_-h1
this.m_about=create m_about
this.Item[UpperBound(this.Item)+1]=this.m_index
this.Item[UpperBound(this.Item)+1]=this.m_usinghelp
this.Item[UpperBound(this.Item)+1]=this.m_-h1
this.Item[UpperBound(this.Item)+1]=this.m_about
end on

on m_help.destroy
call super::destroy
destroy(this.m_index)
destroy(this.m_usinghelp)
destroy(this.m_-h1)
destroy(this.m_about)
end on

type m_index from menu within m_help
end type

event clicked;//******************************************************************
//  PC Module     : m_Help.m_Index
//  Event         : Clicked
//  Description   : Display the help file for the application.
//                  Replace <application_file> with the name of
//                  the application help file.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//  6/21/99  M. Caruso  Added code to call the CF help file.
//  4/26/00  M. Caruso  Changed code to call the new help file.
//  1/16/01  M. Caruso  Updated the help file name.
//******************************************************************
//  Copyright ServerLogic 1992-1994.  All Rights Reserved.
//******************************************************************

SetPointer(HourGlass!)
//ShowHelp("jtdoc2.hlp", Index!)
Run ("hh.EXE CFuser.chm")
end event

on m_index.create
call super::create
this.text = "&Index"
this.microhelp = "Display help"
this.toolbaritemvisible = false
this.toolbaritemname = "Help!"
this.toolbaritemtext = "Help"
this.toolbaritemorder = 15
this.toolbaritemspace = 3
end on

on m_index.destroy
call super::destroy
end on

type m_usinghelp from menu within m_help
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_UsingHelp
//  Event         : Clicked
//  Description   : Display the "Windows Help" help file.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

SetPointer(HourGlass!)
ShowHelp("winhelp.hlp", Index!)
end on

on m_usinghelp.create
call super::create
this.text = "&Using Help"
this.microhelp = "Display ~"Using Windows Help~""
end on

on m_usinghelp.destroy
call super::destroy
end on

type m_-h1 from menu within m_help
end type

on m_-h1.create
call super::create
this.text = "-"
end on

on m_-h1.destroy
call super::destroy
end on

type m_about from menu within m_help
end type

event clicked;//******************************************************************
//  PC Module     : m_Main.m_About
//  Event         : Clicked
//  Description   : Open a window that describes something about
//                  the application.  By default, this window will
//                  display the application name and revision that
//                  are stored in the PCCA structure.  This window
//                  can be redefined if a custom window is desired.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

SetPointer(HourGlass!)
Open(w_cf_about)
end event

on m_about.create
call super::create
this.text = "&About"
this.microhelp = "Display information about the application"
end on

on m_about.destroy
call super::destroy
end on

