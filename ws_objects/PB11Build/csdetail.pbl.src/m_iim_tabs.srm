$PBExportHeader$m_iim_tabs.srm
$PBExportComments$Create/Maintain Case Menu
forward
global type m_iim_tabs from menu
end type
type m_file from menu within m_iim_tabs
end type
type m_outofoffice from menu within m_file
end type
type m_- from menu within m_file
end type
type m_search from menu within m_file
end type
type m_-3 from menu within m_file
end type
type m_printersetup from menu within m_file
end type
type m_print from menu within m_file
end type
type m_-0 from menu within m_file
end type
type m_exit from menu within m_file
end type
type m_file from menu within m_iim_tabs
m_outofoffice m_outofoffice
m_- m_-
m_search m_search
m_-3 m_-3
m_printersetup m_printersetup
m_print m_print
m_-0 m_-0
m_exit m_exit
end type
type m_edit from menu within m_iim_tabs
end type
type m_addcustomerstatement from menu within m_edit
end type
type m_-1 from menu within m_edit
end type
type m_copy from menu within m_edit
end type
type m_paste from menu within m_edit
end type
type m_-2 from menu within m_edit
end type
type m_selectall from menu within m_edit
end type
type m_-4 from menu within m_edit
end type
type m_sort from menu within m_edit
end type
type m_edit from menu within m_iim_tabs
m_addcustomerstatement m_addcustomerstatement
m_-1 m_-1
m_copy m_copy
m_paste m_paste
m_-2 m_-2
m_selectall m_selectall
m_-4 m_-4
m_sort m_sort
end type
type m_features from menu within m_iim_tabs
end type
type m_workdesk from menu within m_features
end type
type m_documentsfullinterface from menu within m_features
end type
type m_recordsurveyresults from menu within m_features
end type
type m_sleepmode from menu within m_features
end type
type m_features from menu within m_iim_tabs
m_workdesk m_workdesk
m_documentsfullinterface m_documentsfullinterface
m_recordsurveyresults m_recordsurveyresults
m_sleepmode m_sleepmode
end type
type m_administration from menu within m_iim_tabs
end type
type m_userlicenses from menu within m_administration
end type
type m_updatelicenseinformation from menu within m_userlicenses
end type
type m_manageuserlogins from menu within m_userlicenses
end type
type m_userlicenses from menu within m_administration
m_updatelicenseinformation m_updatelicenseinformation
m_manageuserlogins m_manageuserlogins
end type
type m_options from menu within m_administration
end type
type m_batchprocessing from menu within m_administration
end type
type m_casehousekeeping from menu within m_administration
end type
type m_tablemaintenance from menu within m_administration
end type
type m_supervisorportal from menu within m_administration
end type
type m_lockedrecords from menu within m_administration
end type
type m_administration from menu within m_iim_tabs
m_userlicenses m_userlicenses
m_options m_options
m_batchprocessing m_batchprocessing
m_casehousekeeping m_casehousekeeping
m_tablemaintenance m_tablemaintenance
m_supervisorportal m_supervisorportal
m_lockedrecords m_lockedrecords
end type
type m_window from menu within m_iim_tabs
end type
type m_tile from menu within m_window
end type
type m_layer from menu within m_window
end type
type m_cascade from menu within m_window
end type
type m_windowsep1 from menu within m_window
end type
type m_arrangeicons from menu within m_window
end type
type m_windowsep2 from menu within m_window
end type
type m_closeall from menu within m_window
end type
type m_window from menu within m_iim_tabs
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m_windowsep1 m_windowsep1
m_arrangeicons m_arrangeicons
m_windowsep2 m_windowsep2
m_closeall m_closeall
end type
type m_help from menu within m_iim_tabs
end type
type m_index from menu within m_help
end type
type m_usinghelp from menu within m_help
end type
type m_helpsep1 from menu within m_help
end type
type m_about from menu within m_help
end type
type m_help from menu within m_iim_tabs
m_index m_index
m_usinghelp m_usinghelp
m_helpsep1 m_helpsep1
m_about m_about
end type
global type m_iim_tabs from menu
m_file m_file
m_edit m_edit
m_features m_features
m_administration m_administration
m_window m_window
m_help m_help
end type
end forward

global type m_iim_tabs from menu
m_file m_file
m_edit m_edit
m_features m_features
m_administration m_administration
m_window m_window
m_help m_help
end type
global m_iim_tabs m_iim_tabs

type variables
BOOLEAN i_bReminderDelete
BOOLEAN i_bOutOfOffice
STRING  i_cUserID

end variables

forward prototypes
public subroutine fm_editoperation (string a_coperation)
end prototypes

public subroutine fm_editoperation (string a_coperation);/****************************************************************************************

  Function: fm_EditOperation
   Purpose: To cut, copy and paste to or from the system clipboard.  Also select all text
				in the editable control.
	
Parameters: a_cOperation - The operation to be perfomed
									cut - Cut Contents to the Clipboard
									copy - Copy Contents to the Clipboard
									paste - Paste Contents from the Clipboard
									selectall - Select all of the text in the edit control
	Returns: None
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				4/30/2001 K. Claver    Created

****************************************************************************************/
GraphicObject l_goObject
DataWindow l_dwObject
SingleLineEdit l_sleObject
MultiLineEdit l_mleObject
EditMask l_emObject
RichTextEdit l_rteObject
DropDownListBox l_ddlbObject
DropDownPictureListBox l_ddplbObject
Boolean l_bOk = TRUE

l_goObject = GetFocus( )

CHOOSE CASE TypeOf( l_goObject )
	CASE SingleLineEdit!
		l_sleObject = l_goObject
		CHOOSE CASE Upper( a_cOperation )
			CASE "CUT"
				l_sleObject.Cut( )
			CASE "COPY"
				l_sleObject.Copy( )
			CASE "PASTE"
				l_sleObject.Paste( )
			CASE "SELECTALL"
				l_sleObject.SelectText( 1, Len( l_sleObject.Text ) )
		END CHOOSE
	CASE EditMask!
		l_emObject = l_goObject
		CHOOSE CASE Upper( a_cOperation )
			CASE "CUT"
				l_emObject.Cut( )
			CASE "COPY"
				l_emObject.Copy( )
			CASE "PASTE"
				l_emObject.Paste( )
			CASE "SELECTALL"
				l_emObject.SelectText( 1, Len( l_emObject.Text ) )
		END CHOOSE
	CASE RichTextEdit!
		l_rteObject = l_goObject
		CHOOSE CASE Upper( a_cOperation )
			CASE "CUT"
				l_rteObject.Cut( )
			CASE "COPY"
				l_rteObject.Copy( )
			CASE "PASTE"
				l_rteObject.Paste( )
			CASE "SELECTALL"
				l_rteObject.SelectTextAll( )
		END CHOOSE
	CASE DropDownListBox!
		l_ddlbObject = l_goObject
		CHOOSE CASE Upper( a_cOperation )
			CASE "CUT"
				l_ddlbObject.Cut( )
			CASE "COPY"
				l_ddlbObject.Copy( )
			CASE "PASTE"
				l_ddlbObject.Paste( )
			CASE "SELECTALL"
				l_ddlbObject.SelectText( 1, Len( l_ddlbObject.Text ) )
		END CHOOSE
	CASE DropDownPictureListBox!
		l_ddplbObject = l_goObject
		CHOOSE CASE Upper( a_cOperation )
			CASE "CUT"
				l_ddplbObject.Cut( )
			CASE "COPY"
				l_ddplbObject.Copy( )
			CASE "PASTE"
				l_ddplbObject.Paste( )
			CASE "SELECTALL"
				l_ddplbObject.SelectText( 1, Len( l_ddplbObject.Text ) )
		END CHOOSE
	CASE DataWindow!
		l_dwObject = l_goObject
		CHOOSE CASE Upper( a_cOperation )
			CASE "CUT"
				l_dwObject.Cut( )
			CASE "COPY"
				l_dwObject.Copy( )
			CASE "PASTE"
				l_dwObject.Paste( )
			CASE "SELECTALL"
				l_dwObject.SelectText(1, Len( l_dwObject.GetText( ) ) )
		END CHOOSE
END CHOOSE		
end subroutine

on m_iim_tabs.create
m_iim_tabs=this
call super::create
this.m_file=create m_file
this.m_edit=create m_edit
this.m_features=create m_features
this.m_administration=create m_administration
this.m_window=create m_window
this.m_help=create m_help
this.Item[UpperBound(this.Item)+1]=this.m_file
this.Item[UpperBound(this.Item)+1]=this.m_edit
this.Item[UpperBound(this.Item)+1]=this.m_features
this.Item[UpperBound(this.Item)+1]=this.m_administration
this.Item[UpperBound(this.Item)+1]=this.m_window
this.Item[UpperBound(this.Item)+1]=this.m_help
end on

on m_iim_tabs.destroy
call super::destroy
destroy(this.m_file)
destroy(this.m_edit)
destroy(this.m_features)
destroy(this.m_administration)
destroy(this.m_window)
destroy(this.m_help)
end on

type m_file from menu within m_iim_tabs
m_outofoffice m_outofoffice
m_- m_-
m_search m_search
m_-3 m_-3
m_printersetup m_printersetup
m_print m_print
m_-0 m_-0
m_exit m_exit
end type

on m_file.create
call super::create
this.text = "&File"
this.m_outofoffice=create m_outofoffice
this.m_-=create m_-
this.m_search=create m_search
this.m_-3=create m_-3
this.m_printersetup=create m_printersetup
this.m_print=create m_print
this.m_-0=create m_-0
this.m_exit=create m_exit
this.Item[UpperBound(this.Item)+1]=this.m_outofoffice
this.Item[UpperBound(this.Item)+1]=this.m_-
this.Item[UpperBound(this.Item)+1]=this.m_search
this.Item[UpperBound(this.Item)+1]=this.m_-3
this.Item[UpperBound(this.Item)+1]=this.m_printersetup
this.Item[UpperBound(this.Item)+1]=this.m_print
this.Item[UpperBound(this.Item)+1]=this.m_-0
this.Item[UpperBound(this.Item)+1]=this.m_exit
end on

on m_file.destroy
call super::destroy
destroy(this.m_outofoffice)
destroy(this.m_-)
destroy(this.m_search)
destroy(this.m_-3)
destroy(this.m_printersetup)
destroy(this.m_print)
destroy(this.m_-0)
destroy(this.m_exit)
end on

event clicked;//*********************************************************************************************
//
//  Event:   clicked
//  Purpose: To determine whether or not to check Out Of Office
//  
//  Date     Developer   Describe
//  -------- ----------- ----------------------------------------------------------------------
//  09/26/00 C. Jackson  Original Version
//
//*********************************************************************************************

LONG l_nCount

// Get userid
i_cUserID = OBJCA.WIN.fu_GetLogin(SQLCA)

// If the user is currently mark as out of the office, setting the Check on the menu item
SELECT count(*) INTO :l_nCount
  FROM cusfocus.out_of_office
 WHERE out_user_id = :i_cUserID
 USING SQLCA;
 
// Update the clicked property based on whether not the user if Out of Office 
IF l_nCount > 0 THEN
	m_outofoffice.Check()
	i_bOutOfOffice = TRUE
ELSE
	m_outofoffice.UnCheck ()
	i_bOutOfOffice = FALSE
END IF


end event

type m_outofoffice from menu within m_file
end type

on m_outofoffice.create
call super::create
this.text = "&Out of Office"
end on

on m_outofoffice.destroy
call super::destroy
end on

event clicked;//**********************************************************************************************
//
//  Event:   clicked
//  Purpose: Add or Remove Out of Office
//  
//  Date     Developer   Description
//  -------- ----------- -----------------------------------------------------------------------
//  09/28/00 C. Jackson  Original Version
//  10/23/00 C. Jackson  Change w_root.fw_getkeyvalue to w_create_maintain_case.fw_getkeyvalue
//
//**********************************************************************************************

STRING l_cNewKey, l_cWindowTitle
DATETIME l_dtCreateDate
LONG l_nPos

l_cWindowTitle = w_mdi.Title 

IF i_bOutOfOffice THEN
	// Remove Out of Office
	DELETE cusfocus.out_of_office
	 WHERE out_user_id = :i_cUserID
	 USING SQLCA;
	 
	UPDATE cusfocus.cusfocus_user
	   SET out_of_office_bmp = 'person.bmp'
	 USING SQLCA;
	 
	// Make sure window title is not already modified
	l_nPos = POS(l_cWindowTitle,' ***')
	IF l_nPos > 0 THEN
		l_cWindowTitle = TRIM(MID(l_cWindowTitle,1,l_nPos))
		w_mdi.Title = l_cWindowTitle
	END IF
	
ELSE
	//Mark the user out of office
	l_dtCreateDate = DateTime(Today())
	l_cNewKey = w_create_maintain_case.fw_getkeyvalue('out_of_office')

	INSERT INTO cusfocus.out_of_office (out_of_office_id, out_user_id, updated_by, updated_timestamp)
	VALUES (:l_cNewKey, :i_cUserID, :i_cUserID, :l_dtCreateDate)
	USING SQLCA;									 
	
	UPDATE cusfocus.cusfocus_user
	   SET out_of_office_bmp = 'out_of_office.bmp'
	 WHERE user_id = :i_cUserID
	 USING SQLCA;

	// Make sure window title is not already modified
	l_nPos = POS(l_cWindowTitle,' ***')
	IF l_nPos = 0 THEN
		w_mdi.Title = w_mdi.Title + ' *** Out of Office'
	END IF
	
END IF


end event

type m_- from menu within m_file
end type

on m_-.create
call super::create
this.text = "-"
end on

on m_-.destroy
call super::destroy
end on

type m_search from menu within m_file
end type

event clicked;/****************************************************************************************

     Event: clicked
   Purpose: To trigger the event to search the IIM tabs on the IIM tabs window
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				10/31/2000 K. Claver   Original Version				
****************************************************************************************/

IF IsValid( w_iim_tabs ) THEN
	w_iim_tabs.Event Trigger ue_iim_search( )
END IF

end event

on m_search.create
call super::create
this.text = "&Search~tCtrl+L"
this.shortcut = 332
this.microhelp = "Retrieves data based on search criteria"
this.toolbaritemname = "ni0104-48.ico"
this.toolbaritemtext = "Search"
this.toolbaritemorder = 2
end on

on m_search.destroy
call super::destroy
end on

type m_-3 from menu within m_file
end type

on m_-3.create
call super::create
this.text = "-"
end on

on m_-3.destroy
call super::destroy
end on

type m_printersetup from menu within m_file
end type

on m_printersetup.create
call super::create
this.text = "Printer Set&up..."
end on

on m_printersetup.destroy
call super::destroy
end on

event clicked;/****************************************************************************************

     Event: clicked
   Purpose: Please see PB documentation for this event.
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				5/29/2001 K. Claver    Added function call to bring up the printer setup box.
****************************************************************************************/
PrintSetup( )
end event

type m_print from menu within m_file
end type

on m_print.create
call super::create
this.text = "&Print...~tCtrl+P"
this.shortcut = 336
this.toolbaritemname = "wi0146-48.ico"
this.toolbaritemtext = "Print"
this.toolbaritemorder = 4
this.toolbaritemspace = 1
end on

on m_print.destroy
call super::destroy
end on

event clicked;/****************************************************************************************

     Event: clicked
   Purpose: Please see PB documentation for this event.
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				5/29/2001 K. Claver    Added code to print the current tab datawindow.
****************************************************************************************/
IF IsValid( w_iim_tabs ) THEN
	w_iim_tabs.Event Trigger ue_PrintCurrentTab( )
END IF
end event

type m_-0 from menu within m_file
end type

on m_-0.create
call super::create
this.text = "-"
end on

on m_-0.destroy
call super::destroy
end on

type m_exit from menu within m_file
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Exit
//  Event         : Clicked
//  Description   : Exit the application by closing the top
//                  level window.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1994.  All Rights Reserved.
//******************************************************************

FWCA.MGR.fu_ExitApp()
end on

on m_exit.create
call super::create
this.text = "E&xit"
this.microhelp = "Exit the application."
this.toolbaritemvisible = false
end on

on m_exit.destroy
call super::destroy
end on

type m_edit from menu within m_iim_tabs
m_addcustomerstatement m_addcustomerstatement
m_-1 m_-1
m_copy m_copy
m_paste m_paste
m_-2 m_-2
m_selectall m_selectall
m_-4 m_-4
m_sort m_sort
end type

on m_edit.create
call super::create
this.text = "&Edit"
this.m_addcustomerstatement=create m_addcustomerstatement
this.m_-1=create m_-1
this.m_copy=create m_copy
this.m_paste=create m_paste
this.m_-2=create m_-2
this.m_selectall=create m_selectall
this.m_-4=create m_-4
this.m_sort=create m_sort
this.Item[UpperBound(this.Item)+1]=this.m_addcustomerstatement
this.Item[UpperBound(this.Item)+1]=this.m_-1
this.Item[UpperBound(this.Item)+1]=this.m_copy
this.Item[UpperBound(this.Item)+1]=this.m_paste
this.Item[UpperBound(this.Item)+1]=this.m_-2
this.Item[UpperBound(this.Item)+1]=this.m_selectall
this.Item[UpperBound(this.Item)+1]=this.m_-4
this.Item[UpperBound(this.Item)+1]=this.m_sort
end on

on m_edit.destroy
call super::destroy
destroy(this.m_addcustomerstatement)
destroy(this.m_-1)
destroy(this.m_copy)
destroy(this.m_paste)
destroy(this.m_-2)
destroy(this.m_selectall)
destroy(this.m_-4)
destroy(this.m_sort)
end on

type m_addcustomerstatement from menu within m_edit
end type

on m_addcustomerstatement.create
call super::create
this.text = "&Add Case Note"
this.toolbaritemname = "wi0038-48.ico"
this.toolbaritemtext = "Add Case Note"
this.toolbaritemorder = 3
this.toolbaritemspace = 1
end on

on m_addcustomerstatement.destroy
call super::destroy
end on

event clicked;//*********************************************************************************************
//
//  Event:   clicked
//  Purpose: Please PB documentation for this event
//  
//  Date     Developer   Describe
//  -------- ----------- ----------------------------------------------------------------------
//  11/1/2000 K. Claver  Added code to copy the IIM tab information to the case notes for the 
//								 customer statement
//
//*********************************************************************************************
u_dw_std l_dwIIMDW
Integer l_nSelectedTab, l_nRV
u_iim_tab_page l_uTabPage

IF IsValid( w_iim_tabs ) AND IsValid( w_create_maintain_case ) THEN
	IF IsValid( w_create_maintain_case.i_uoCaseDetails ) THEN
		//Get the current tab as that will be the index of the
		//  control array that is associated with the tab
		//  user object
		l_nSelectedTab = w_iim_tabs.tab_folder.SelectedTab
		
		//Get a reference to the iim tab page user object
		l_uTabPage = w_iim_tabs.tab_folder.Control[ l_nSelectedTab ]
		l_dwIIMDW = l_uTabPage.dw_summary_view
		
		//Call the function on the case details object to add the IIM tab info
		l_nRV = w_create_maintain_case.i_uoCaseDetails.fu_AddCustomerStmt( l_dwIIMDW )
		
		IF l_nRV < 1 THEN
			MessageBox( gs_AppName, "Unable to add the case note to the note field" )
		ELSE
			MessageBox( gs_AppName, "Case Note successfully added" )
		END IF
	END IF
END IF
end event

type m_-1 from menu within m_edit
end type

on m_-1.create
call super::create
this.text = "-"
end on

on m_-1.destroy
call super::destroy
end on

type m_copy from menu within m_edit
end type

on m_copy.create
call super::create
this.text = "Copy~tCtrl+C"
this.shortcut = 323
this.microhelp = "Copy Contents to Clipboard"
this.toolbaritemname = "wi0039-48.ico"
this.toolbaritemtext = "Copy Contents to Clipboard"
this.toolbaritemorder = 10
this.toolbaritemspace = 1
end on

on m_copy.destroy
call super::destroy
end on

event clicked;/****************************************************************************************

     Event: clicked
   Purpose: Please see PB documentation for this event
	
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				4/30/2001 K. Claver    Added function call to copy the contents of the object
											  to the clipboard

****************************************************************************************/
fm_EditOperation( "COPY" )
end event

type m_paste from menu within m_edit
end type

on m_paste.create
call super::create
this.text = "Paste~tCtrl+V"
this.shortcut = 342
this.microhelp = "Paste Contents of Clipboard"
this.toolbaritemname = "wi0020-48.ico"
this.toolbaritemtext = "Paste Contents of Clipboard"
this.toolbaritemorder = 11
end on

on m_paste.destroy
call super::destroy
end on

event clicked;/****************************************************************************************

     Event: clicked
   Purpose: Please see PB documentation for this event
	
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				4/30/2001 K. Claver    Added function call to paste the contents of the clipboard
											  into the object

****************************************************************************************/
fm_EditOperation( "PASTE" )
end event

type m_-2 from menu within m_edit
end type

on m_-2.create
call super::create
this.text = "-"
end on

on m_-2.destroy
call super::destroy
end on

type m_selectall from menu within m_edit
end type

on m_selectall.create
call super::create
this.text = "Select All~tCtrl+A"
this.shortcut = 321
end on

on m_selectall.destroy
call super::destroy
end on

event clicked;/****************************************************************************************

     Event: clicked
   Purpose: Please see PB documentation for this event
	
	
 Revisions: Date     Developer     Description
            ======== ============= ======================================================
				4/30/2001 K. Claver    Added function call to select the contents of the object.
											  
****************************************************************************************/
fm_EditOperation( "SELECTALL" )
end event

type m_-4 from menu within m_edit
end type

on m_-4.create
call super::create
this.text = "-"
end on

on m_-4.destroy
call super::destroy
end on

type m_sort from menu within m_edit
event clicked ( )
end type

event clicked;/**************************************************************************************
	
		
			Event:	clicked
			Purpose:	To sort the DataWindow

***************************************************************************************/

W_IIM_TABS l_wParentWindow

l_wParentWindow = FWCA.MGR.i_MDIFrame.GetActiveSheet()

//-------------------------------------------------------------------------------------
//
//		Call the sortdata function
//
//-------------------------------------------------------------------------------------

IF IsValid(l_wParentWindow) THEN
	l_wParentWindow.fw_sortdata()
END IF
end event

on m_sort.create
call super::create
this.text = "&Sort...~tCtrl+Y"
this.shortcut = 345
this.microhelp = "Opens the Sort window"
this.toolbaritemname = "wi0138-48.ico"
this.toolbaritemtext = "Sort"
this.toolbaritemorder = 28
this.toolbaritemspace = 1
end on

on m_sort.destroy
call super::destroy
end on

type m_features from menu within m_iim_tabs
m_workdesk m_workdesk
m_documentsfullinterface m_documentsfullinterface
m_recordsurveyresults m_recordsurveyresults
m_sleepmode m_sleepmode
end type

on m_features.create
call super::create
this.text = "Fea&tures"
this.m_workdesk=create m_workdesk
this.m_documentsfullinterface=create m_documentsfullinterface
this.m_recordsurveyresults=create m_recordsurveyresults
this.m_sleepmode=create m_sleepmode
this.Item[UpperBound(this.Item)+1]=this.m_workdesk
this.Item[UpperBound(this.Item)+1]=this.m_documentsfullinterface
this.Item[UpperBound(this.Item)+1]=this.m_recordsurveyresults
this.Item[UpperBound(this.Item)+1]=this.m_sleepmode
end on

on m_features.destroy
call super::destroy
destroy(this.m_workdesk)
destroy(this.m_documentsfullinterface)
destroy(this.m_recordsurveyresults)
destroy(this.m_sleepmode)
end on

type m_workdesk from menu within m_features
event clicked ( )
end type

on clicked;/***************************************************************************************

	
			Event:	clicked
			Purpose:	To open the Reminders window

****************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_reminders, -1)
end on

on m_workdesk.create
call super::create
this.text = "&Work Desk"
this.microhelp = "Opens the Work Desk window"
end on

on m_workdesk.destroy
call super::destroy
end on

type m_documentsfullinterface from menu within m_features
event clicked ( )
end type

event clicked;//***************************************************************************************
//
//  Event:    clicked
//  Purpose:  Opens the Document Full Interface Window
//
//***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_docs_full_interface, -1)


end event

on m_documentsfullinterface.create
call super::create
this.text = "&Documents Full Interface"
this.microhelp = "Opens the Documents Full Interface Window"
end on

on m_documentsfullinterface.destroy
call super::destroy
end on

type m_recordsurveyresults from menu within m_features
event clicked ( )
end type

on clicked;/***************************************************************************************


		Event:	clicked
		Purpose:	To open the Record Survey Results window

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_record_survey_results, -1)
end on

on m_recordsurveyresults.create
call super::create
this.text = "Record &Survey Results"
this.microhelp = "Opens the Record Survey Results window"
end on

on m_recordsurveyresults.destroy
call super::destroy
end on

type m_sleepmode from menu within m_features
event clicked ( )
end type

event clicked;/*****************************************************************************************
   Event:      clicked
   Purpose:    Place the application into sleep mode

   Revisions:
   Date     Developer    Description
   ======== ============ =================================================================
	05/25/01 M. Caruso    Created.
*****************************************************************************************/

w_mdi.fw_Sleep ()
end event

on m_sleepmode.create
call super::create
this.visible = false
this.text = "Sleep Mode"
this.enabled = false
this.microhelp = "Place the application in Sleep Mode."
this.toolbaritemvisible = false
this.toolbaritemname = "Custom015!"
this.toolbaritemtext = "Enter Sleep Mode"
end on

on m_sleepmode.destroy
call super::destroy
end on

type m_administration from menu within m_iim_tabs
m_userlicenses m_userlicenses
m_options m_options
m_batchprocessing m_batchprocessing
m_casehousekeeping m_casehousekeeping
m_tablemaintenance m_tablemaintenance
m_supervisorportal m_supervisorportal
m_lockedrecords m_lockedrecords
end type

on m_administration.create
call super::create
this.text = "&Administration"
this.m_userlicenses=create m_userlicenses
this.m_options=create m_options
this.m_batchprocessing=create m_batchprocessing
this.m_casehousekeeping=create m_casehousekeeping
this.m_tablemaintenance=create m_tablemaintenance
this.m_supervisorportal=create m_supervisorportal
this.m_lockedrecords=create m_lockedrecords
this.Item[UpperBound(this.Item)+1]=this.m_userlicenses
this.Item[UpperBound(this.Item)+1]=this.m_options
this.Item[UpperBound(this.Item)+1]=this.m_batchprocessing
this.Item[UpperBound(this.Item)+1]=this.m_casehousekeeping
this.Item[UpperBound(this.Item)+1]=this.m_tablemaintenance
this.Item[UpperBound(this.Item)+1]=this.m_supervisorportal
this.Item[UpperBound(this.Item)+1]=this.m_lockedrecords
end on

on m_administration.destroy
call super::destroy
destroy(this.m_userlicenses)
destroy(this.m_options)
destroy(this.m_batchprocessing)
destroy(this.m_casehousekeeping)
destroy(this.m_tablemaintenance)
destroy(this.m_supervisorportal)
destroy(this.m_lockedrecords)
end on

type m_userlicenses from menu within m_administration
m_updatelicenseinformation m_updatelicenseinformation
m_manageuserlogins m_manageuserlogins
end type

on m_userlicenses.create
call super::create
this.text = "&User Licenses"
this.m_updatelicenseinformation=create m_updatelicenseinformation
this.m_manageuserlogins=create m_manageuserlogins
this.Item[UpperBound(this.Item)+1]=this.m_updatelicenseinformation
this.Item[UpperBound(this.Item)+1]=this.m_manageuserlogins
end on

on m_userlicenses.destroy
call super::destroy
destroy(this.m_updatelicenseinformation)
destroy(this.m_manageuserlogins)
end on

type m_updatelicenseinformation from menu within m_userlicenses
event clicked ( )
end type

event clicked;/*****************************************************************************************
   Event:      clicked
   Purpose:    Open the user license maintenance window

   Revisions:
   Date     Developer    Description
   ======== ============ =================================================================
	8/7/00   M. Caruso    Created.
*****************************************************************************************/

SetPointer (HOURGLASS!)

FWCA.MGR.fu_OpenWindow (w_slu_main)
end event

on m_updatelicenseinformation.create
call super::create
this.text = "&Update License Information"
this.microhelp = "Opens the Update License Information window"
end on

on m_updatelicenseinformation.destroy
call super::destroy
end on

type m_manageuserlogins from menu within m_userlicenses
end type

on m_manageuserlogins.create
call super::create
this.text = "&Manage User Logins"
this.microhelp = "Opens the User Login managment window"
end on

on m_manageuserlogins.destroy
call super::destroy
end on

event clicked;/*****************************************************************************************
   Event:      clicked
   Purpose:    Open the user login maintenance window

   Revisions:
   Date     Developer    Description
   ======== ============ =================================================================
	8/7/00   M. Caruso    Created.
*****************************************************************************************/

SetPointer (HOURGLASS!)

FWCA.MGR.fu_OpenWindow (w_slu_login_mgr)
end event

type m_options from menu within m_administration
event clicked ( )
end type

event clicked;//*********************************************************************************************
//  Event:   clicked
//  Purpose: Acces the system options window.
//  
//  Date     Developer   Describe
//  -------- ----------- ----------------------------------------------------------------------
//  12/08/00 M. Caruso   Created.
//*********************************************************************************************

SetPointer (HOURGLASS!)
FWCA.MGR.fu_OpenWindow (w_system_options)
end event

on m_options.create
call super::create
this.text = "&Options"
this.toolbaritemvisible = false
end on

on m_options.destroy
call super::destroy
end on

type m_batchprocessing from menu within m_administration
event clicked ( )
end type

on clicked;/***************************************************************************************


		Event:	clicked
		Purpose:	To open the Batch Correspondence window

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_batch_correspondence, -1)
end on

on m_batchprocessing.create
call super::create
this.text = "&Batch Correspondence"
this.microhelp = "Opens the Batch Correspondence window"
end on

on m_batchprocessing.destroy
call super::destroy
end on

type m_casehousekeeping from menu within m_administration
event clicked ( )
end type

on clicked;/***************************************************************************************


		Event:	clicked
		Purpose:	To open the Case Housekeeping window

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_case_housekeeping, -1)
end on

on m_casehousekeeping.create
call super::create
this.text = "Case &Housekeeping"
this.microhelp = "Opens the Case Housekeeping window"
end on

on m_casehousekeeping.destroy
call super::destroy
end on

type m_tablemaintenance from menu within m_administration
event clicked ( )
end type

on clicked;/***************************************************************************************


			Event:	clicked
			Purpose:	To open the Table Maintenance Window

***************************************************************************************/


SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_table_maintenance, -1)
end on

on m_tablemaintenance.create
call super::create
this.text = "&Table Maintenance"
this.microhelp = "Opens the Table Maintenance window"
end on

on m_tablemaintenance.destroy
call super::destroy
end on

type m_supervisorportal from menu within m_administration
end type

on m_supervisorportal.create
call super::create
this.text = "&Supervisor Portal"
this.microhelp = "Opens the Supervisor Portal window"
end on

on m_supervisorportal.destroy
call super::destroy
end on

event clicked;/**************************************************************************************

			Event:	clicked
			Purpose:	To open the Supervisor Portal Window

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_supervisor_portal, -1)
end event

type m_lockedrecords from menu within m_administration
end type

event clicked;/**************************************************************************************

			Event:	clicked
			Purpose:	To open the Record Lock Administration window.

***************************************************************************************/

SetPointer(HOURGLASS!)
FWCA.MGR.fu_OpenWindow(w_lock_admin, -1)
end event

on m_lockedrecords.create
call super::create
this.text = "&Locked Records"
this.microhelp = "Locked Records"
this.toolbaritemtext = "Record Locks"
end on

on m_lockedrecords.destroy
call super::destroy
end on

type m_window from menu within m_iim_tabs
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m_windowsep1 m_windowsep1
m_arrangeicons m_arrangeicons
m_windowsep2 m_windowsep2
m_closeall m_closeall
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Window
//  Event         : Clicked
//  Description   : Enable the window menus
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

m_Window.m_ArrangeIcons.Enabled = FWCA.MGR.i_MDIValid
m_Window.m_Cascade.Enabled      = FWCA.MGR.i_MDIValid
m_Window.m_Layer.Enabled        = FWCA.MGR.i_MDIValid
m_Window.m_Tile.Enabled         = FWCA.MGR.i_MDIValid
m_Window.m_Closeall.Enabled     = FWCA.MGR.i_MDIValid
end on

on m_window.create
call super::create
this.text = "&Window"
this.m_tile=create m_tile
this.m_layer=create m_layer
this.m_cascade=create m_cascade
this.m_windowsep1=create m_windowsep1
this.m_arrangeicons=create m_arrangeicons
this.m_windowsep2=create m_windowsep2
this.m_closeall=create m_closeall
this.Item[UpperBound(this.Item)+1]=this.m_tile
this.Item[UpperBound(this.Item)+1]=this.m_layer
this.Item[UpperBound(this.Item)+1]=this.m_cascade
this.Item[UpperBound(this.Item)+1]=this.m_windowsep1
this.Item[UpperBound(this.Item)+1]=this.m_arrangeicons
this.Item[UpperBound(this.Item)+1]=this.m_windowsep2
this.Item[UpperBound(this.Item)+1]=this.m_closeall
end on

on m_window.destroy
call super::destroy
destroy(this.m_tile)
destroy(this.m_layer)
destroy(this.m_cascade)
destroy(this.m_windowsep1)
destroy(this.m_arrangeicons)
destroy(this.m_windowsep2)
destroy(this.m_closeall)
end on

type m_tile from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Tile
//  Event         : Clicked
//  Description   : Arrange the open windows so that no windows in
//                  the MDI frame overlap but all windows are
//                  visible.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Tile!)

END IF
end on

on m_tile.create
call super::create
this.text = "&Tile"
this.microhelp = "Arrange windows as tiled"
this.toolbaritemvisible = false
end on

on m_tile.destroy
call super::destroy
end on

type m_layer from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Layer
//  Event         : Clicked
//  Description   : Arrange the open windows so that all windows are
//                  sized to use the full screen and are layered on
//                  top of one another.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Layer!)
END IF
end on

on m_layer.create
call super::create
this.text = "La&yer"
this.microhelp = "Arrange the windows as layered"
this.toolbaritemvisible = false
end on

on m_layer.destroy
call super::destroy
end on

type m_cascade from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Cascade
//  Event         : Clicked
//  Description   : Arrange the open windows so they overlap each
//                  other with the title bar of each window
//                  remaining visible.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Cascade!)
END IF
end on

on m_cascade.create
call super::create
this.text = "&Cascade"
this.microhelp = "Arrange the windows as cascaded"
this.toolbaritemvisible = false
end on

on m_cascade.destroy
call super::destroy
end on

type m_windowsep1 from menu within m_window
end type

on m_windowsep1.create
call super::create
this.text = "-"
end on

on m_windowsep1.destroy
call super::destroy
end on

type m_arrangeicons from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_ArrangeIcons
//  Event         : Clicked
//  Description   : Arrange the open windows that have been
//                  minimized to icons.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   ArrangeSheets(FWCA.MGR.i_MDIFrame, Icons!)
END IF
end on

on m_arrangeicons.create
call super::create
this.text = "&Arrange Icons"
this.microhelp = "Arrange the window icons"
this.toolbaritemvisible = false
end on

on m_arrangeicons.destroy
call super::destroy
end on

type m_windowsep2 from menu within m_window
end type

on m_windowsep2.create
call super::create
this.text = "-"
end on

on m_windowsep2.destroy
call super::destroy
end on

type m_closeall from menu within m_window
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_CloseAll
//  Event         : Clicked

//  Description   : Close all the windows in the MDI frame that
//                  have been open using the Window_Open function.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

IF FWCA.MGR.i_MDIValid THEN
   TriggerEvent(FWCA.MGR.i_MDIFrame, "pc_CloseAll")
END IF
end on

on m_closeall.create
call super::create
this.text = "C&lose All"
this.microhelp = "Close all the open windows"
this.toolbaritemvisible = false
end on

on m_closeall.destroy
call super::destroy
end on

type m_help from menu within m_iim_tabs
m_index m_index
m_usinghelp m_usinghelp
m_helpsep1 m_helpsep1
m_about m_about
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_Help
//  Event         : Clicked
//  Description   : Set up the text in the help menu.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1994.  All Rights Reserved.
//******************************************************************

IF IsValid(m_Help.m_About) THEN
   m_Help.m_About.Text = "&About " + FWCA.MGR.i_ApplicationName
END IF
end on

on m_help.create
call super::create
this.text = "&Help"
this.m_index=create m_index
this.m_usinghelp=create m_usinghelp
this.m_helpsep1=create m_helpsep1
this.m_about=create m_about
this.Item[UpperBound(this.Item)+1]=this.m_index
this.Item[UpperBound(this.Item)+1]=this.m_usinghelp
this.Item[UpperBound(this.Item)+1]=this.m_helpsep1
this.Item[UpperBound(this.Item)+1]=this.m_about
end on

on m_help.destroy
call super::destroy
destroy(this.m_index)
destroy(this.m_usinghelp)
destroy(this.m_helpsep1)
destroy(this.m_about)
end on

type m_index from menu within m_help
end type

event clicked;//******************************************************************
//  PC Module     : m_Main.m_Index
//  Event         : Clicked
//  Description   : Display the help file for the application.
//                  Replace <application_file> with the name of
//                  the application help file.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//  6/16/99  M. Caruso  Added code to call the CF help file.
//  4/26/00  M. Caruso  Changed code to call new help file.
//  1/16/01  M. Caruso  Updated the help file name.
//******************************************************************
//  Copyright ServerLogic 1992-1994.  All Rights Reserved.
//******************************************************************

SetPointer(HourGlass!)
//ShowHelp("jtdoc2.hlp", Index!)
Run ("hh.EXE CFuser.chm")
end event

on m_index.create
call super::create
this.text = "&Index"
this.microhelp = "Display help"
this.toolbaritemvisible = false
this.toolbaritemname = "help!"
end on

on m_index.destroy
call super::destroy
end on

type m_usinghelp from menu within m_help
end type

on clicked;//******************************************************************
//  PC Module     : m_Main.m_UsingHelp
//  Event         : Clicked
//  Description   : Display the "Windows Help" help file.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

SetPointer(HourGlass!)
ShowHelp("winhelp.hlp", Index!)
end on

on m_usinghelp.create
call super::create
this.text = "&Using Help"
this.microhelp = "Display ~"Using Windows Help~""
end on

on m_usinghelp.destroy
call super::destroy
end on

type m_helpsep1 from menu within m_help
end type

on m_helpsep1.create
call super::create
this.text = "-"
end on

on m_helpsep1.destroy
call super::destroy
end on

type m_about from menu within m_help
end type

event clicked;//******************************************************************
//  PC Module     : m_Main.m_About
//  Event         : Clicked
//  Description   : Open a window that describes something about
//                  the application.  By default, this window will
//                  display the application name and revision that
//                  are stored in the PCCA structure.  This window
//                  can be redefined if a custom window is desired.
//
//  Change History:
//
//  Date     Person     Description of Change
//  -------- ---------- --------------------------------------------
//
//******************************************************************
//  Copyright ServerLogic 1992-1993.  All Rights Reserved.
//******************************************************************

SetPointer(HourGlass!)
Open(w_cf_about)
end event

on m_about.create
call super::create
this.text = "&About..."
this.microhelp = "Display information about the application"
end on

on m_about.destroy
call super::destroy
end on

